version: '3'

services:
  # User Service (Python Flask with PostgreSQL)
  user-service:
    build: ./user-service
    environment:
      POSTGRES_DB: shop_user_db
      POSTGRES_USER: user_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Loaded from .env file
    depends_on:
      - postgres_db

  postgres_db:
    image: postgres:latest
    environment:
      POSTGRES_DB: shop_user_db
      POSTGRES_USER: user_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Loaded from .env file
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Product Service (Node.js with MongoDB)
  product-service:
    build: ./product-service
    environment:
      MONGO_URI: mongodb://mongo_db/shop_product_db
    depends_on:
      - mongo_db

  mongo_db:
    image: mongo:latest
    environment:
      MONGO_INITDB_DATABASE: shop_product_db
    volumes:
      - mongo_data:/data/db

  # Order Service (Java Spring Boot with MySQL)
  order-service:
    build: ./order-service
    environment:
      MYSQL_DATABASE: shop_order_db
      MYSQL_USER: order_admin
      MYSQL_PASSWORD: ${MYSQL_PASSWORD} # Loaded from .env file
    depends_on:
      - mysql_db

  mysql_db:
    image: mysql:latest
    environment:
      MYSQL_DATABASE: shop_order_db
      MYSQL_USER: order_admin
      MYSQL_PASSWORD: ${MYSQL_PASSWORD} # Loaded from .env file
    volumes:
      - mysql_data:/var/lib/mysql

  # Nginx as a reverse proxy
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - user-service
      - product-service
      - order-service

volumes:
  postgres_data:
  mongo_data:
  mysql_data:
